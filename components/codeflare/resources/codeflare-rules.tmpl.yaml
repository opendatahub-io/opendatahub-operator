apiVersion: monitoring.rhobs/v1
kind: PrometheusRule
metadata:
  name: codeflare-prometheusrules
  namespace:  [[ .Monitoring.Namespace ]]
spec:
  groups:
    - name: SLOs - MCAD Controller
      rules:
      - expr: |
          1 - avg_over_time(probe_success{instance=~"mcad-controller-.*", job="user_facing_endpoints_status_codeflare"}[1d])
        labels:
          instance: mcad-controller
        record: probe_success:burnrate1d
      - expr: |
          1 - avg_over_time(probe_success{instance=~"mcad-controller-.*", job="user_facing_endpoints_status_codeflare"}[1h])
        labels:
          instance: mcad-controller
        record: probe_success:burnrate1h
      - expr: |
          1 - avg_over_time(probe_success{instance=~"mcad-controller-.*", job="user_facing_endpoints_status_codeflare"}[2h])
        labels:
          instance: mcad-controller
        record: probe_success:burnrate2h
      - expr: |
          1 - avg_over_time(probe_success{instance=~"mcad-controller-.*", job="user_facing_endpoints_status_codeflare"}[30m])
        labels:
          instance: mcad-controller
        record: probe_success:burnrate30m
      - expr: |
          1 - avg_over_time(probe_success{instance=~"mcad-controller-.*", job="user_facing_endpoints_status_codeflare"}[3d])
        labels:
          instance: mcad-controller
        record: probe_success:burnrate3d
      - expr: |
          1 - avg_over_time(probe_success{instance=~"mcad-controller-.*", job="user_facing_endpoints_status_codeflare"}[5m])
        labels:
          instance: mcad-controller
        record: probe_success:burnrate5m
      - expr: |
          1 - avg_over_time(probe_success{instance=~"mcad-controller-.*", job="user_facing_endpoints_status_codeflare"}[6h])
        labels:
          instance: mcad-controller
        record: probe_success:burnrate6h

    - name: SLOs - CodeFlare Operator
      rules:
      - expr: |
          1 - avg_over_time(probe_success{instance=~"codeflare-operator-.*", job="user_facing_endpoints_status_codeflare"}[1d])
        labels:
          instance: codeflare-operator
        record: probe_success:burnrate1d
      - expr: |
          1 - avg_over_time(probe_success{instance=~"codeflare-operator-.*", job="user_facing_endpoints_status_codeflare"}[1h])
        labels:
          instance: codeflare-operator
        record: probe_success:burnrate1h
      - expr: |
          1 - avg_over_time(probe_success{instance=~"codeflare-operator-.*", job="user_facing_endpoints_status_codeflare"}[2h])
        labels:
          instance: codeflare-operator
        record: probe_success:burnrate2h
      - expr: |
          1 - avg_over_time(probe_success{instance=~"codeflare-operator-.*", job="user_facing_endpoints_status_codeflare"}[30m])
        labels:
          instance: codeflare-operator
        record: probe_success:burnrate30m
      - expr: |
          1 - avg_over_time(probe_success{instance=~"codeflare-operator-.*", job="user_facing_endpoints_status_codeflare"}[3d])
        labels:
          instance: codeflare-operator
        record: probe_success:burnrate3d
      - expr: |
          1 - avg_over_time(probe_success{instance=~"codeflare-operator-.*", job="user_facing_endpoints_status_codeflare"}[5m])
        labels:
          instance: codeflare-operator
        record: probe_success:burnrate5m
      - expr: |
          1 - avg_over_time(probe_success{instance=~"codeflare-operator-.*", job="user_facing_endpoints_status_codeflare"}[6h])
        labels:
          instance: codeflare-operator
        record: probe_success:burnrate6h
  
    - name: SLOs-probe_success_codeflare
      rules:
      - alert: CodeFlare Operator Probe Success Burn Rate
        annotations:
          message: 'High error budget burn for {{ $labels.instance }} (current value: {{ $value }}).'
          triage: 'https://gitlab.cee.redhat.com/service/managed-tenants-sops/-/blob/main/RHODS/Distributed-Workloads/codeflare-operator-availability.md'
          summary: CodeFlare Operator Probe Success Burn Rate
        expr: |
          sum(probe_success:burnrate5m{instance=~"codeflare-operator"}) by (instance) > (14.40 * (1-0.99950))
          and
          sum(probe_success:burnrate1h{instance=~"codeflare-operator"}) by (instance) > (14.40 * (1-0.99950))
        for: 2m
        labels:
          severity: info
          namespace: {{ .AppNamespace }}
      - alert: CodeFlare Operator Probe Success Burn Rate
        annotations:
          message: 'High error budget burn for {{ $labels.instance }} (current value: {{ $value }}).'
          triage: 'https://gitlab.cee.redhat.com/service/managed-tenants-sops/-/blob/main/RHODS/Distributed-Workloads/codeflare-operator-probe-success-burn-rate.md'
          summary: CodeFlare Operator Probe Success Burn Rate
        expr: |
          sum(probe_success:burnrate30m{instance=~"codeflare-operator"}) by (instance) > (6.00 * (1-0.99950))
          and
          sum(probe_success:burnrate6h{instance=~"codeflare-operator"}) by (instance) > (6.00 * (1-0.99950))
        for: 15m
        labels:
          severity: info
          namespace: {{ .AppNamespace }}
      - alert: CodeFlare Operator Probe Success Burn Rate
        annotations:
          message: 'High error budget burn for {{ $labels.instance }} (current value: {{ $value }}).'
          triage: 'https://gitlab.cee.redhat.com/service/managed-tenants-sops/-/blob/main/RHODS/Distributed-Workloads/codeflare-operator-probe-success-burn-rate.md'
          summary: CodeFlare Operator Probe Success Burn Rate
        expr: |
          sum(probe_success:burnrate2h{instance=~"codeflare-operator"}) by (instance) > (3.00 * (1-0.99950))
          and
          sum(probe_success:burnrate1d{instance=~"codeflare-operator"}) by (instance) > (3.00 * (1-0.99950))
        for: 1h
        labels:
          severity: info
          namespace: {{ .AppNamespace }}

    - name: Distributed Workloads CodeFlare