apiVersion: apps/v1
kind: Deployment
metadata:
  name: ds-pipeline-ui-{{.Name}}
  namespace: {{.Namespace}}
  labels:
    app: ds-pipeline-ui-{{.Name}}
    component: data-science-pipelines
    dspa: {{.Name}}
spec:
  selector:
    matchLabels:
      app: ds-pipeline-ui-{{.Name}}
      component: data-science-pipelines
      dspa: {{.Name}}
  template:
    metadata:
      annotations:
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: ds-pipeline-ui-{{.Name}}
        component: data-science-pipelines
        dspa: {{.Name}}
    spec:
      containers:
        - env:
            - name: VIEWER_TENSORBOARD_POD_TEMPLATE_SPEC_PATH
              value: /etc/config/viewer-pod-template.json
            - name: MINIO_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: MINIO_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: "{{.ObjectStorageConnection.CredentialsSecret.AccessKey}}"
                  name: "{{.ObjectStorageConnection.CredentialsSecret.SecretName}}"
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: "{{.ObjectStorageConnection.CredentialsSecret.SecretKey}}"
                  name: "{{.ObjectStorageConnection.CredentialsSecret.SecretName}}"
            - name: ALLOW_CUSTOM_VISUALIZATIONS
              value: "true"
            - name: ARGO_ARCHIVE_LOGS
              value: "true"
            - name: ML_PIPELINE_SERVICE_HOST
              value: {{.APIServerServiceDNSName}}
            - name: ML_PIPELINE_SERVICE_PORT
              value: '8888'
            {{ if .PodToPodTLS }}
            - name: ML_PIPELINE_SERVICE_SCHEME
              value: 'https'
            - name: NODE_EXTRA_CA_CERTS
              value: '/var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt'
            {{ end }}
            - name: METADATA_ENVOY_SERVICE_SERVICE_HOST
              value: ds-pipeline-md-{{.Name}}
            - name: METADATA_ENVOY_SERVICE_SERVICE_PORT
              value: "9090"
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{.ObjectStorageConnection.CredentialsSecret.SecretName}}
                  key: {{.ObjectStorageConnection.CredentialsSecret.AccessKey}}
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{.ObjectStorageConnection.CredentialsSecret.SecretName}}
                  key: {{.ObjectStorageConnection.CredentialsSecret.SecretKey}}
            - name: AWS_REGION
              value: {{.ObjectStorageConnection.Region}}
            - name: AWS_S3_ENDPOINT
              value: {{.ObjectStorageConnection.Host}}
            {{ if eq .ObjectStorageConnection.Scheme "http"}}
            - name: AWS_SSL
              value: "false"
            {{ end }}
            - name: DISABLE_GKE_METADATA
              value: 'true'
          image: {{.MlPipelineUI.Image}}
          # imagePullPolicy: default - https://kubernetes.io/docs/concepts/containers/images/#imagepullpolicy-defaulting
          livenessProbe:
            httpGet:
              port: 3000
              path: /apis/v1beta1/healthz
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 2
          name: ds-pipeline-ui
          ports:
            - containerPort: 3000
          readinessProbe:
            httpGet:
              port: 3000
              path: /apis/v1beta1/healthz
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 2
          resources:
            {{ if .MlPipelineUI.Resources.Requests }}
            requests:
              {{ if .MlPipelineUI.Resources.Requests.CPU }}
              cpu: {{.MlPipelineUI.Resources.Requests.CPU}}
              {{ end }}
              {{ if .MlPipelineUI.Resources.Requests.Memory }}
              memory: {{.MlPipelineUI.Resources.Requests.Memory}}
              {{ end }}
            {{ end }}
            {{ if .MlPipelineUI.Resources.Limits }}
            limits:
              {{ if .MlPipelineUI.Resources.Limits.CPU }}
              cpu: {{.MlPipelineUI.Resources.Limits.CPU}}
              {{ end }}
              {{ if .MlPipelineUI.Resources.Limits.Memory }}
              memory: {{.MlPipelineUI.Resources.Limits.Memory}}
              {{ end }}
            {{ end }}
          volumeMounts:
            - mountPath: /etc/config
              name: config-volume
              readOnly: true
        - name: oauth-proxy
          args:
            - --https-address=:8443
            - --provider=openshift
            - --openshift-service-account=ds-pipeline-ui-{{.Name}}
            - --upstream=http://localhost:3000
            - --tls-cert=/etc/tls/private/tls.crt
            - --tls-key=/etc/tls/private/tls.key
            - --cookie-secret=SECRET
            - '--openshift-delegate-urls={"/": {"group":"route.openshift.io","resource":"routes","verb":"get","name":"ds-pipeline-ui-{{.Name}}","namespace":"{{.Namespace}}"}}'
            - '--openshift-sar={"namespace":"{{.Namespace}}","resource":"routes","resourceName":"ds-pipeline-ui-{{.Name}}","verb":"get","resourceAPIGroup":"route.openshift.io"}'
            - --skip-auth-regex='(^/metrics|^/apis/v1beta1/healthz)'
          image: {{.OAuthProxy}}
          ports:
            - containerPort: 8443
              name: https
          livenessProbe:
            httpGet:
              path: /oauth/healthz
              port: 8443
              scheme: HTTPS
            initialDelaySeconds: 30
            timeoutSeconds: 1
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /oauth/healthz
              port: 8443
              scheme: HTTPS
            initialDelaySeconds: 5
            timeoutSeconds: 1
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          resources:
            limits:
              cpu: 100m
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 256Mi
          volumeMounts:
            - mountPath: /etc/tls/private
              name: proxy-tls
      serviceAccountName: ds-pipeline-ui-{{.Name}}
      volumes:
        - configMap:
            name: {{.MlPipelineUI.ConfigMapName}}
          name: config-volume
        - name: proxy-tls
          secret:
            secretName: ds-pipelines-ui-proxy-tls-{{.Name}}
