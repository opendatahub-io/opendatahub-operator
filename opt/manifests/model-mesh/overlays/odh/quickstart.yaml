# Copyright 2021 IBM Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
apiVersion: v1
kind: Service
metadata:
  name: etcd
  labels:
    component: model-mesh-etcd
spec:
  ports:
    - name: etcd-client-port
      port: 2379
      protocol: TCP
      targetPort: 2379
  selector:
    component: model-mesh-etcd
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    component: model-mesh-etcd
  name: etcd
spec:
  replicas: 1
  selector:
    matchLabels:
      component: model-mesh-etcd
  template:
    metadata:
      labels:
        component: model-mesh-etcd
    spec:
      volumes:
        - name: scripts
          configMap:
            name: etcd-scripts
            defaultMode: 0554
      initContainers:
        - name: etcd-secret-creator
          image: registry.redhat.io/openshift4/ose-cli@sha256:25fef269ac6e7491cb8340119a9b473acbeb53bc6970ad029fdaae59c3d0ca61
          command: ["/bin/bash", "-c", "--"]
          args:
            - |
              etcdpasswordexists=$(oc get secrets -o name | grep etcd-passwords || echo "false")
              modelservingetcdexists=$(oc get secrets -o name | grep model-serving-etcd || echo "false")

              if [[ $etcdpasswordexists == "false" && $modelservingetcdexists == "false" ]]; then
                echo "creating etcdpasswords and model-serving-etcd secrets"
                ETC_ROOT_PSW=$(cat /dev/urandom | tr -dc 'a-z0-9' | fold -w 32 | head -n 1)
                oc create secret generic etcd-passwords --type=string --from-literal=root=$ETC_ROOT_PSW
                oc create secret generic model-serving-etcd --type=string --from-literal=etcd_connection="{\"endpoints\": \"http://etcd:2379\",\"root_prefix\": \"modelmesh-serving\",\"userid\": \"root\",\"password\": \"$ETC_ROOT_PSW\"}"
                exit 0
              elif [[ $etcdpasswordexists != "false" && $modelservingetcdexists == "false" ]]; then
                echo "etcdpasswords exists, creating model-serving-etcd secret"
                ETC_ROOT_PSW=$(oc get secrets/etcd-passwords --template={{.data.root}} | base64 -d)
                oc create secret generic model-serving-etcd --type=string --from-literal=etcd_connection="{\"endpoints\": \"http://etcd:2379\",\"root_prefix\": \"modelmesh-serving\",\"userid\": \"root\",\"password\": \"$ETC_ROOT_PSW\"}"
                exit 0
              elif [[ $etcdpasswordexists == "false" && $modelservingetcdexists != "false" ]]; then
                echo "model-serving-etcd exists, creating etcdpasswords secret"
                ETC_ROOT_PSW=$(oc get secrets/model-serving-etcd --template={{.data.etcd_connection}} | base64 -d | grep -o '"password": *"[^"]*"' | grep -o '"[^"]*"$' | grep -oP '"\K[^"\047]+(?=["\047])') 
                oc create secret generic etcd-passwords --type=string --from-literal=root=$ETC_ROOT_PSW
                exit 0
              else 
                echo "secrets etcdpasswords and model-serving-etcd exist, doing nothing"
                exit 0
              fi
          resources:
            limits:
              cpu: 500m
              memory: 400Mi
            requests:
              cpu: 250m
              memory: 200Mi
      containers:
        - command:
            - etcd
            - --listen-client-urls
            - http://0.0.0.0:2379
            - --advertise-client-urls
            - http://0.0.0.0:2379
            - "--data-dir"
            - /tmp/etcd.data
          image: registry.redhat.io/rhel7/etcd@sha256:d3495b263b103681f1b09a558be43c21989bfc269eb90f84c2609042cebdc626
          name: etcd
          env:
            - name: ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: etcd-passwords
                  key: root
          volumeMounts:
            - mountPath: /home/scripts
              name: scripts
          ports:
            - containerPort: 2379
              name: client
              protocol: TCP
            - containerPort: 2380
              name: server
              protocol: TCP
          resources: # ref: https://github.com/coreos/etcd-operator/blob/master/doc/user/spec_examples.md#three-member-cluster-with-resource-requirement
            limits:
              cpu: 800m
              memory: 800Mi
            requests:
              cpu: 400m
              memory: 200Mi
          livenessProbe:
            tcpSocket:
              port: 2379
            initialDelaySeconds: 30
            timeoutSeconds: 1
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            tcpSocket:
              port: 2379
            initialDelaySeconds: 5
            timeoutSeconds: 1
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          lifecycle:
            postStart:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - /home/scripts/enable_auth.sh ${ROOT_PASSWORD}
      serviceAccountName: etcd-serviceaccount
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
  name: etcd-serviceaccount
  namespace: $(mesh-namespace)
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
  name: etcd-role
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: etcd-clusterrolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: etcd-role
subjects:
  - kind: ServiceAccount
    name: etcd-serviceaccount
    namespace: $(mesh-namespace)
