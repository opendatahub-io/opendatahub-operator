package v1alpha1

import (
	"github.com/opendatahub-io/opendatahub-operator/v2/api/common"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

const (
	{{ .Component }}ComponentName = "{{ .Component | lowercase }}"
	// value should match whats set in the XValidation below
	{{ .Component }}InstanceName = "default-" + "{{ .Component | lowercase }}"
	{{ .Component }}Kind         = "{{ .Component }}"
)

type {{ .Component }}CommonSpec struct {
	// TODO:
	// new component spec shared with DSC api
	// ( refer/define here if applicable to the new component )
}

type {{ .Component }}Spec struct {
	{{ .Component }}CommonSpec `json:",inline"`

	// TODO:
	// new component spec exposed only to internal api
	// ( refer/define here if applicable to the new component )
}

// {{ .Component }}CommonStatus defines the shared observed state of {{ .Component }}
type {{ .Component }}CommonStatus struct {
	common.ComponentReleaseStatus `json:",inline"`
}

// {{ .Component }}Status defines the observed state of {{ .Component }}
type {{ .Component }}Status struct {
	common.Status            `json:",inline"`
	{{ .Component }}CommonStatus `json:",inline"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster
// +kubebuilder:validation:XValidation:rule="self.metadata.name == 'default-{{ .Component | lowercase }}'",message="{{ .Component }} name must be default-{{ .Component | lowercase }}"
// +kubebuilder:printcolumn:name="Ready",type=string,JSONPath=`.status.conditions[?(@.type=="Ready")].status`,description="Ready"
// +kubebuilder:printcolumn:name="Reason",type=string,JSONPath=`.status.conditions[?(@.type=="Ready")].reason`,description="Reason"

// {{ .Component }} is the Schema for the {{ .Component }}s API
type {{ .Component }} struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   {{ .Component }}Spec   `json:"spec,omitempty"`
	Status {{ .Component }}Status `json:"status,omitempty"`
}

func (c *{{ .Component }}) GetStatus() *common.Status {
	return &c.Status.Status
}

func (c *{{ .Component }}) GetConditions() []common.Condition {
	return c.Status.GetConditions()
}

func (c *{{ .Component }}) SetConditions(conditions []common.Condition) {
	c.Status.SetConditions(conditions)
}

func (c *{{ .Component }}) GetReleaseStatus() *[]common.ComponentRelease {
	return &c.Status.Releases
}

func (c *{{ .Component }}) SetReleaseStatus(releases []common.ComponentRelease) {
	c.Status.Releases = releases
}

// +kubebuilder:object:root=true

// {{ .Component }}List contains a list of {{ .Component }}
type {{ .Component }}List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []{{ .Component }} `json:"items"`
}

func init() {
	SchemeBuilder.Register(&{{ .Component }}{}, &{{ .Component }}List{})
}

type DSC{{ .Component }} struct {
	common.ManagementSpec  `json:",inline"`
	{{ .Component }}CommonSpec `json:",inline"`
}

// DSC{{ .Component }}Status contains the observed state of the {{ .Component }} exposed in the DSC instance
type DSC{{ .Component }}Status struct {
	common.ManagementSpec     `json:",inline"`
	*{{ .Component }}CommonStatus `json:",inline"`
}
