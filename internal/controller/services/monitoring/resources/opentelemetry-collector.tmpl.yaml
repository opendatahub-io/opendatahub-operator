apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: {{ .OpenTelemetryCollectorName }}
  namespace: {{ .Namespace}}
spec:
  mode: deployment
  observability:
    metrics:
      enableMetrics: true
  targetAllocator:
    prometheusCR:
      podMonitorSelector:
        matchExpressions:
          - key: monitoring.opendatahub.io/scrape
            operator: 'true'
      scrapeInterval: 30s
      serviceMonitorSelector:
        matchExpressions:
          - key: monitoring.opendatahub.io/scrape
            operator: 'true'
  config:
    receivers:
      prometheus:
        config:
          scrape_configs:
            - job_name: '{{ .PromPipelineName }}'
              scrape_interval: 30s
              scrape_timeout: 10s
              metrics_path: /metrics
              relabel_configs:
                - source_labels: [__meta_kubernetes_pod_label_monitoring_opendatahub_io_scrape]
                  action: keep
                  regex: true
      {{ if .Traces }}
      jaeger:
        protocols:
          grpc: {}
          thrift_binary: {}
          thrift_compact: {}
          thrift_http: {}
      opencensus:
      otlp:
        protocols:
          grpc: {}
          http: {}
      {{ end }}
    processors:
      memory_limiter:
        check_interval: 1s
        spike_limit_mib: 800
        limit_mib: 4000
      batch:
        send_batch_size: 10000
      k8sattributes:
        extract:
          metadata:
            - k8s.pod.name
            - service.namespace
      {{ if .Traces }}
      resourcedetection:
        detectors: [openshift]
      {{ end }}
    exporters:
      prometheus:
        endpoint: 0.0.0.0:8889
        resource_to_telemetry_conversion:
          enabled: true # by default resource attributes are dropped
      {{ if .Traces }}
      otlp:
        endpoint: "tempo-<example>-distributor:4317" 
        tls:
          insecure: true
      {{ end }}
    service: 
      pipelines:
      {{ if .Traces }}
        traces:
          receivers: [jaeger, opencensus, otlp, zipkin]
          processors: [memory_limiter, k8sattributes, resourcedetection, batch]
          exporters: [otlp]
      {{ end }}
        metrics:
          receivers: [prometheus]
          processors: [memory_limiter, batch, k8sattributes]
          exporters: [prometheus]