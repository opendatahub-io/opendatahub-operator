---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-tls-ca-copy
  namespace: {{.Namespace}}
  labels:
    platform.opendatahub.io/part-of: monitoring
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: prometheus-tls-ca-copy
  namespace: {{.Namespace}}
  labels:
    platform.opendatahub.io/part-of: monitoring
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "create", "update", "patch"]
  resourceNames: ["prometheus-web-tls-ca"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: prometheus-tls-ca-copy
  namespace: {{.Namespace}}
  labels:
    platform.opendatahub.io/part-of: monitoring
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: prometheus-tls-ca-copy
subjects:
- kind: ServiceAccount
  name: prometheus-tls-ca-copy
  namespace: {{.Namespace}}
---
# Job to copy CA from ConfigMap to Secret (MonitoringStack requires Secret)
apiVersion: batch/v1
kind: Job
metadata:
  name: prometheus-web-tls-ca-copy
  namespace: {{.Namespace}}
  labels:
    platform.opendatahub.io/part-of: monitoring
spec:
  backoffLimit: 3
  template:
    metadata:
      labels:
        app: prometheus-tls-ca-copy
    spec:
      restartPolicy: OnFailure
      serviceAccountName: prometheus-tls-ca-copy
      containers:
        - name: copy-ca
          image: registry.redhat.io/openshift4/ose-cli:latest
          command:
            - /bin/bash
            - -c
            - |
              set -e

              # Check if secret already exists (idempotency)
              if kubectl get secret prometheus-web-tls-ca -n {{.Namespace}} &>/dev/null; then
                echo "Secret prometheus-web-tls-ca already exists"
                
                # Verify if the CA content in the secret matches the ConfigMap
                echo "Checking if CA content needs update..."
                
                # Wait for CA ConfigMap to be populated
                while [ ! -f /ca-configmap/service-ca.crt ]; do
                  echo "Waiting for service-ca.crt..."
                  sleep 2
                done
                
                # Get current secret CA content
                CURRENT_CA=$(kubectl get secret prometheus-web-tls-ca -n {{.Namespace}} -o jsonpath='{.data.service-ca\.crt}' | base64 -d)
                CONFIGMAP_CA=$(cat /ca-configmap/service-ca.crt)
                
                if [ "$CURRENT_CA" = "$CONFIGMAP_CA" ]; then
                  echo "CA Secret is up to date, nothing to do"
                  exit 0
                fi
                
                echo "CA content has changed, updating secret..."
              else
                echo "Secret does not exist, creating..."
                
                # Wait for CA ConfigMap to be populated
                echo "Waiting for CA ConfigMap to be populated..."
                while [ ! -f /ca-configmap/service-ca.crt ]; do
                  echo "Waiting for service-ca.crt..."
                  sleep 2
                done
              fi

              echo "Creating/Updating Secret from CA..."
              kubectl create secret generic prometheus-web-tls-ca \
                -n {{.Namespace}} \
                --from-file=service-ca.crt=/ca-configmap/service-ca.crt \
                --dry-run=client -o yaml | kubectl apply -f -

              echo "CA Secret created/updated successfully"
          volumeMounts:
            - name: ca-configmap
              mountPath: /ca-configmap
              readOnly: true
      volumes:
        - name: ca-configmap
          configMap:
            name: prometheus-web-tls-ca
