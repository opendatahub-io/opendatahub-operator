apiVersion: monitoring.rhobs/v1
kind: PrometheusRule
metadata:
  name: workbenches-prometheusrules
  namespace: {{.Namespace}}
spec:
  groups:
      - name: RHODS-PVC-Usage
        rules:
        - alert: User notebook pvc usage above 90%
          annotations:
            message: 'The user notebook {{`{{`}}$labels.persistentvolumeclaim{{`}}`}} is using 90% of its Volume. You might want to decrease the amount of data stored on the server or you can reach out to your cluster admin to increase the storage capacity to prevent disruptions and loss of data. Please back up your data before increasing the storage limit.'
            summary: User notebook pvc usage above 90%
          expr: kubelet_volume_stats_used_bytes{persistentvolumeclaim=~".*jupyterhub-nb-.*"} / kubelet_volume_stats_capacity_bytes{persistentvolumeclaim=~"jupyterhub-nb-.*"} > 0.9 and kubelet_volume_stats_used_bytes{persistentvolumeclaim=~".*jupyterhub-nb-.*"} / kubelet_volume_stats_capacity_bytes{persistentvolumeclaim=~"jupyterhub-nb-.*"} < 0.99
          for: 2m
          labels:
            severity: warning
            route: user-notifications
        - alert: User notebook pvc usage at 100%
          annotations:
            message: 'The user notebook {{`{{`}}$labels.persistentvolumeclaim{{`}}`}} is using 100% of its Volume. You might want to decrease the amount of data stored on the server or you can reach out to your cluster admin to increase the storage capacity to prevent disruptions and loss of data. Please back up your data before increasing the storage limit.'
            summary: User notebook pvc usage at 100%
          expr: kubelet_volume_stats_used_bytes{persistentvolumeclaim=~".*jupyterhub-nb-.*"}/kubelet_volume_stats_capacity_bytes{persistentvolumeclaim=~"jupyterhub-nb-.*"} > 0.99
          for: 2m
          labels:
            severity: warning
            route: user-notifications

      - name: RHODS Notebook controllers
        rules:
        - alert: Kubeflow notebook controller pod is not running
          annotations:
            message: 'Kubeflow Notebook controller is down!'
            summary: Kubeflow notebook controller pod is not running
          expr: absent(up{job=~'Kubeflow Notebook Controller Service Metrics'})
          for: 5m
          labels:
            severity: warning
            namespace: redhat-ods-applications
        - alert: ODH notebook controller pod is not running
          annotations:
            message: 'ODH notebook controller is down!'
            summary: ODH notebook controller pod is not running
          expr: absent(up{job=~'ODH Notebook Controller Service Metrics'})
          for: 5m
          labels:
            severity: warning
            namespace: redhat-ods-applications

      
      - name: SLOs-probe_success_workbench
        rules:
        - alert: RHODS Jupyter Probe Success Burn Rate
          annotations:
            message: 'High error budget burn for {{`{{`}}$labels.instance{{`}}`}} (current value: {{`{{`}}$value{{`}}`}} ).'
            summary: RHODS Jupyter Probe Success Burn Rate
          expr: |
            sum(probe_success:burnrate5m{instance=~"notebook-spawner"}) by (instance) > (14.40 * (1-0.98000))
            and
            sum(probe_success:burnrate1h{instance=~"notebook-spawner"}) by (instance) > (14.40 * (1-0.98000))
          for: 2m
          labels:
            severity: critical
            instance: notebook-spawner
        - alert: RHODS Jupyter Probe Success Burn Rate
          annotations:
            message: 'High error budget burn for {{`{{`}}$labels.instance{{`}}`}} (current value: {{`{{`}}$value{{`}}`}} ).'
            summary: RHODS Jupyter Probe Success Burn Rate
          expr: |
            sum(probe_success:burnrate30m{instance=~"notebook-spawner"}) by (instance) > (6.00 * (1-0.98000))
            and
            sum(probe_success:burnrate6h{instance=~"notebook-spawner"}) by (instance) > (6.00 * (1-0.98000))
          for: 15m
          labels:
            severity: critical
            instance: notebook-spawner
        - alert: RHODS Jupyter Probe Success Burn Rate
          annotations:
            message: 'High error budget burn for {{`{{`}}$labels.instance{{`}}`}} (current value: {{`{{`}}$value{{`}}`}} ).'
            summary: RHODS Jupyter Probe Success Burn Rate
          expr: |
            sum(probe_success:burnrate2h{instance=~"notebook-spawner"}) by (instance) > (3.00 * (1-0.98000))
            and
            sum(probe_success:burnrate1d{instance=~"notebook-spawner"}) by (instance) > (3.00 * (1-0.98000))
          for: 1h
          labels:
            severity: warning
            instance: notebook-spawner
        - alert: RHODS Jupyter Probe Success Burn Rate
          annotations:
            message: 'High error budget burn for {{`{{`}}$labels.instance{{`}}`}} (current value: {{`{{`}}$value{{`}}`}} ).'
            summary: RHODS Jupyter Probe Success Burn Rate
          expr: |
            sum(probe_success:burnrate6h{instance=~"notebook-spawner"}) by (instance) > (1.00 * (1-0.98000))
            and
            sum(probe_success:burnrate3d{instance=~"notebook-spawner"}) by (instance) > (1.00 * (1-0.98000))
          for: 3h
          labels:
            severity: warning
            instance: notebook-spawner

      # RecordingRules for Notebook Controller
      - name: SLOs - Notebook Controller
        rules:
        - expr: |
            1 - min(avg_over_time(probe_success{name=~"notebook-spawner", job="user_facing_endpoints_status_workbenches"}[1d]))
          labels:
            instance: notebook-spawner
          record: probe_success:burnrate1d
        - expr: |
            1 - min(avg_over_time(probe_success{name=~"notebook-spawner",job="user_facing_endpoints_status_workbenches"}[1h]))
          labels:
            instance: notebook-spawner
          record: probe_success:burnrate1h
        - expr: |
            1 - min(avg_over_time(probe_success{name=~"notebook-spawner", job="user_facing_endpoints_status_workbenches"}[2h]))
          labels:
            instance: notebook-spawner
          record: probe_success:burnrate2h
        - expr: |
            1 - min(avg_over_time(probe_success{name=~"notebook-spawner",job="user_facing_endpoints_status_workbenches"}[30m]))
          labels:
            instance: notebook-spawner
          record: probe_success:burnrate30m
        - expr: |
            1 - min(avg_over_time(probe_success{name=~"notebook-spawner", job="user_facing_endpoints_status_workbenches"}[3d]))
          labels:
            instance: notebook-spawner
          record: probe_success:burnrate3d
        - expr: |
            1 - min(avg_over_time(probe_success{name=~"notebook-spawner", job="user_facing_endpoints_status_workbenches"}[5m]))
          labels:
            instance: notebook-spawner
          record: probe_success:burnrate5m
        - expr: |
            1 - min(avg_over_time(probe_success{name=~"notebook-spawner",job="user_facing_endpoints_status_workbenches"}[6h]))
          labels:
            instance: notebook-spawner
          record: probe_success:burnrate6h

      - name: Usage Metrics
        rules:
        - expr: count(kube_statefulset_replicas{namespace=~"rhods-notebooks", statefulset=~"jupyter-nb-.*"})
          record: rhods_total_users
          labels:
            instance: jupyter-notebooks
        - expr: count(kube_statefulset_replicas{namespace=~"rhods-notebooks", statefulset=~"jupyter-nb-.*"} ==1)
          record: rhods_active_users
          labels:
            instance: jupyter-notebooks
        - record: cluster:usage:consumption:rhods:cpu:seconds:rate1h
          expr: sum(rate(container_cpu_usage_seconds_total{container="",pod=~"jupyter-nb.*",namespace="rhods-notebooks"}[1h]))
          labels:
            instance: jupyter-notebooks
        - record: cluster:usage:consumption:rhods:pod:up
          expr: count(kube_pod_container_status_ready{namespace="rhods-notebooks", pod=~"jupyter-nb.*",container=~"jupyter-nb-.*"}==1)
          labels:
            instance: jupyter-notebooks
        - record: cluster:usage:consumption:rhods:active_users
          expr: count(kube_statefulset_replicas{namespace=~"rhods-notebooks", statefulset=~"jupyter-nb-.*"} ==1)
          labels:
            instance: jupyter-notebooks
        - record: cluster:usage:consumption:rhods:cpu_requests_runtime
          expr: sum(kube_pod_container_resource_requests{namespace="rhods-notebooks",resource="cpu", container=~"jupyter-nb-.*"} * on(pod) kube_pod_status_phase{phase="Running", namespace="rhods-notebooks"})
          labels:
            instance: jupyter-notebooks
        - record: cluster:usage:consumption:rhods:cpu_limits_runtime
          expr: sum(kube_pod_container_resource_limits{namespace="rhods-notebooks",resource="cpu", container=~"jupyter-nb-.*"} * on(pod) kube_pod_status_phase{phase="Running", namespace="rhods-notebooks"})
          labels:
            instance: jupyter-notebooks
        
      - name: Availability Metrics
        rules:
        - expr: ((min(probe_success{name=~"rhods-dashboard|notebook-spawner"}) by (name) or on() vector(0)) or label_replace(min(probe_success{name=~"rhods-dashboard|notebook-spawner"}), "name", "combined", "name", ".*"))
          record: rhods_aggregate_availability
          labels:
            instance: jupyter-notebooks
